name: build

on:
  push:
    branches:
      - main

  pull_request:
    branches:
      - main

env:
  CARGO_TERM_COLOR: always

jobs:
  check-license:
    runs-on: ubuntu-latest
    timeout-minutes: 3

    steps:
      - uses: actions/checkout@v3
      - name: Check License Header
        uses: apache/skywalking-eyes@f461a46e74e5fa22e9f9599a355ab4f0ac265469

  build:
    runs-on: ubuntu-latest
    container:
      image: fedora:36
    steps:
      ## Install perl due to https://github.com/openssl/openssl/issues/13761
      - name: Install deps
        run: |
          sudo dnf groupinstall -y c-development
          sudo dnf install -y git clang llvm protobuf-compiler cmake perl
      - uses: actions/checkout@v2

      - uses: actions/checkout@v2
        with:
          repository: libbpf/libbpf
          path: libbpf

      - uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          components: rust-src
          override: true

      - name: Install bpf-linker
        run: cargo install bpf-linker

      - uses: Swatinem/rust-cache@v1

      - name: Build eBPF
        run: |
          cargo xtask build-ebpf --libbpf-dir ./libbpf
      - name: Check formatting
        run: |
          cargo +nightly fmt --all -- --check
          pushd bpfd-ebpf
          cargo +nightly fmt --all -- --check
          popd
      - name: Run clippy
        run: |
          cargo +nightly clippy --all -- --deny warnings
          pushd bpfd-ebpf
          cargo +nightly clippy --all -- --deny warnings
          popd
      - name: Build
        run: cargo build --verbose

      - name: Run tests
        run: RUST_BACKTRACE=full cargo test --verbose

  ## Build go modules
  build-go:
    runs-on: ubuntu-latest
    env:
      GOPATH: ${{ github.workspace }}
    defaults:
      run:
        working-directory: ${{ env.GOPATH }}/src/github.com/bpfd-dev/bpfd
    steps:
      - uses: actions/checkout@v2
        with:
          path: ${{ env.GOPATH }}/src/github.com/bpfd-dev/bpfd

      - uses: actions/setup-go@v3
        with:
          go-version: "1.20"

      - name: Build Examples
        run: |
          go build ./examples/go-tc-counter/
          go build ./examples/go-xdp-counter/

      ## Run linter on Examples
      - uses: golangci/golangci-lint-action@v3
        with:
          # Optional: version of golangci-lint to use in form of v1.2 or v1.2.3 or `latest` to use the latest version
          # Keep this version synced with /bpfd/bpfd-operator/hack/verify-golint.sh and /bpfd/bpfd-operator/scripts/verify-golint.sh
          version: v1.51.1
          # Optional: working directory, useful for monorepos
          working-directory: ${{ env.GOPATH }}/src/github.com/bpfd-dev/bpfd/examples
          # Optional: if set to true then the all caching functionality will be complete disabled,
          #           takes precedence over all other caching options.
          skip-cache: true
          # Optional: if set to true then the action don't cache or restore ~/go/pkg.
          skip-pkg-cache: true
          # Optional: if set to true then the action don't cache or restore ~/.cache/go-build.
          skip-build-cache: true
          # Set verbose logging
          args: -v

      - name: Build Operator
        run: |
          cd bpfd-operator
          make build

      - name: Verify Operator Generated
        run: |
          cd bpfd-operator
          make verify

      ## Run linter on bpfd-operator
      - uses: golangci/golangci-lint-action@v3
        with:
          # Optional: version of golangci-lint to use in form of v1.2 or v1.2.3 or `latest` to use the latest version
          # Keep this version synced with /bpfd/bpfd-operator/scripts/verify-golint.sh
          version: v1.51.1
          # Optional: working directory, useful for monorepos
          working-directory: ${{ env.GOPATH }}/src/github.com/bpfd-dev/bpfd/bpfd-operator
          # Optional: if set to true then the all caching functionality will be complete disabled,
          #           takes precedence over all other caching options.
          skip-cache: true
          # Optional: if set to true then the action don't cache or restore ~/go/pkg.
          skip-pkg-cache: true
          # Optional: if set to true then the action don't cache or restore ~/.cache/go-build.
          skip-build-cache: true
          # Set verbose logging
          args: -v

      - name: Run Operator Unit Tests
        run:  |
          cd bpfd-operator
          make test

  basic-integration-tests:
    runs-on: ubuntu-latest
    needs: ["build", "build-go"]
    env:
      CARGO_TERM_COLOR: always
    steps:
      - uses: actions/checkout@v2

      - name: Install deps
        run: sudo apt-get install -y git clang llvm protobuf-compiler cmake perl acl openssl pkgconf gcc-multilib

      - uses: actions/checkout@v2
        with:
          repository: libbpf/libbpf
          path: libbpf

      - uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          components: rust-src
          override: true

      - name: Install bpf-linker
        run: cargo install bpf-linker

      - name: Build eBPF
        run: cargo xtask build-ebpf --libbpf-dir ./libbpf

      - name: Build bpfd
        run: cargo build --verbose

      - name: Run the bpfd installer
        run: sudo ./scripts/setup.sh install

      - name: Give certs time to be created
        run: sleep 5

      - name: Verify the bpfd systemd service is active
        run: systemctl is-active bpfd

      - name: Verify the bpfctl can reach bpfd
        run: sudo bpfctl --help

      - name: Stop the bpfd systemd service
        run: sudo systemctl stop bpfd

      - name: Run integration tests
        run: cargo xtask integration-test

  kubernetes-integration-tests:
    needs: ["build", "build-go"]
    runs-on: ubuntu-latest
    env:
      BPFD_IMG: "quay.io/bpfd/bpfd:int-test"
      BPFD_AGENT_IMG: "quay.io/bpfd/bpfd-agent:int-test"
      BPFD_OPERATOR_IMG: "quay.io/bpfd/bpfd-operator:int-test"
      ## This should match what's found in bpfd/bpfd-operator/config/certmanager/kustomization.yaml
      CERTMANAGER_VERSION: "v1.10.1"
    steps:
      - name: setup golang
        uses: actions/setup-go@v3
        with:
          go-version: "^1.19"

      - name: cache go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-build-codegen-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-build-codegen-
      - name: checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: build images
        run: cd bpfd-operator && make build-images

      - name: run integration tests
        run: cd bpfd-operator && make test-integration

      ## Upload diagnostics if integration test step failed.
      - name: upload diagnostics
        if: ${{ failure() }}
        uses: actions/upload-artifact@v3
        with:
          name: kubernetes-integration-test-diag
          path: /tmp/ktf-diag*
          if-no-files-found: ignore

  build-workflow-complete:
    needs:
      [
        "check-license",
        "build",
        "build-go",
        "basic-integration-tests",
        "kubernetes-integration-tests",
      ]
    runs-on: ubuntu-latest
    steps:
      - name: Build Complete
        run: echo "Build Complete"
